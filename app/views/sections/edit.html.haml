- form_for @section do |f|
  = render :partial => 'form', :locals => { :f => f }
  %p.submit
    = f.submit "Update"

#section-content.container
  .span-17
    #add-article.span-17.ui-block.inactive
      .header.clear
        %h6.info 
          = link_to "New Article", new_section_article_path(:section_id => @section ), :class => 'add button remote_add_article', :'data-target' => '#section-content #add-article-inset', :id => 'add-article-button'
      #add-article-inset.js-staging.simple
        .remote_content
    .clear

    - ordered, unordered = @section.placements.partition { |p| p.list_order }
    %ol#top-items.plain.placements_list.ui-block{ 'data-section-id' => @section.id }
      %h6.info
        Top Items
      .clear
      - form_for :placement_orderings, :url => placement_orderings_path, :html => { :method => :put, :class => 'js-staging save_placements_list' } do |f|
        &nbsp;
      .reloadable
        .content
          - if ordered and !ordered.empty?
            - for placement in ordered
              = render :partial => 'sections/list/placement', :locals => { :placement => placement }
          - else
            %li.placeholder

    %ul#recent-items.plain.placements_list.ui-block{'data-section-id' => @section.id }
      %h6.info
        Recent Items
      .clear
      - form_for :placement_orderings, :url => placement_orderings_path, :html => { :method => :delete, :class => 'js-staging save_placements_list' } do |f|
        &nbsp;
      .reloadable
        .content
          - if unordered and !unordered.empty?
            - for placement in unordered
              = render :partial => 'sections/list/placement', :locals => { :placement => placement }
          - else
            %li.placeholder
    
  -#= link_to "new", new_section_article_path(:section_id => @section ), :class => 'add button'
  -#.span-3.prepend-3
    %ul#remove-items.plain.ui-block
      %h6#remove-title.info
        Remove
      .clear

  .span-6
    %ul#available-items.placements_list.ui-block.plain{ 'data-section-id' => @section.id }
      %h6.info
        Add
      .clear
      - form_for @section.placements.build, :html => {:class => 'js-hide', :id => 'create-placement' } do |f|
        = f.select "article_id", article_options( :exclude_section => @section ), {}, :id => 'add_article_select'
        = f.hidden_field "list_order"
        = f.hidden_field "section_id"
        = f.submit "Add" 

      - form_tag section_available_articles_path(:section_id => @section ), :method => :get, :class => 'js-only', :id => 'available-search-form' do
        = text_field_tag "query[fulltext]", params[:query] || "Search", :class => 'large', :id => 'articles-search'
        = submit_tag "Go", :class => 'js-staging'

      .reloadable.js-only
        .content
          %li.placeholder
          


  #remote-staging.js-staging

- content_for :dom_ready do
  = "var auth_token = '#{form_authenticity_token}'"
  = "RD.section = #{@section.to_json}.section;"
  :plain
    RD.auth_token = auth_token;
    var success_message = function(response) { RD.notify("success"); };

    //Article Submit
    $('.placements_list').fn( RD.placements_list() );
    $('#add-article-inset,.edit-article-inset').livequery( function() { $(this).fn( RD.article_inset() ); } );
    $('#add-article-inset :submit,.edit-article-inset :submit').livequery( 'click', function(ev) {
      var article_inset = $(ev.target).parents('#add-article-inset,.edit-article-inset').eq(0);
      $(ev.target).parents('li[id^=placement_ids_]').addClass('updated');
      $(ev.target.form).fn( RD.remote_form( {
        response: function(response) {
          $(article_inset).fn('after_submit', response );
          $('.placements_list').each( function() { $(this).fn('refresh'); } );
          RD.notify('article saved');
        }
      } ));
      $(ev.target.form).fn( 'submit', 'json' );

      return false;
    } );

    //Cancel button, new article and edit
    $('#add-article-inset .cancel,.edit-article-inset .cancel').livequery( 'click', function(ev) {
      var article_inset = $(ev.target).parents('#add-article-inset,.edit-article-inset').eq(0);
      article_inset.fn('cancel');
      return false;
    } );

    //Show edit form
    $('.placements_list .edit').livequery( 'click', function(ev) {
      var article_inset = $(ev.target).parents('li[data-article-id]').eq(0).find('.edit-article-inset').eq(0);
      $(article_inset).fn('edit');
      return false;
    } );

    //Show add form
    $('#add-article-button').livequery( 'click', function(ev) {
      var article_inset = $('#add-article-inset');
      $(article_inset).fn('new');
      return false;
    } );
    
    //Article Search
    $('#available-search-form').submit( function(ev) {
      $('#available-items .content').html('');
      $('#available-items .reloadable').load( $(ev.target).attr('action') + '?' + $(ev.target).serialize() + ' .content' );
      return false;
    } );

    //create placements
    $('form.create_placement').livequery( 'submit', function(ev) {
      var form = this;
      $(this).fn( RD.remote_form( { response: function( response ) {
        $(form).parents('.new_placement').eq(0).addClass('updated').removeClass('new_placement').attr('id', 'placement_ids_' + response.placement.id );
        $(form).parents('.placements_list').fn('save');
        $(form).remove();
      }} ));
      $(this).fn('submit', 'json');
      return false;
    });


    //Sortables for placement ordering
    //Update Top Items
    $('#top-items').sortable({ 
      tolerance: 'intersect',
      placeholder: 'shadow-droppable',
      opacity: .7,
      items: '.content > li',
      containment: '#section-content',
      update: function(ev, ui) { 
        if(ui.sender !== null ) { $('#top-items').fn('create_and_save'); };
      },
      connectWith: [ "#recent-items", '#available-items' ]
    });

    //Update Recent Items
    $('#recent-items').sortable( { 
      placeholder: 'shadow-droppable',
      items: '.content > li',
      containment: '#section-content',
      connectWith: [ '#top-items','#available-items' ], 
      update: function(ev, ui) { 
        if(ui.sender !== null ) { $('#recent-items').fn('create_and_save'); };
      }
    } );

    //Update Available Items
    $('#available-items').sortable( { 
      placeholder: 'shadow-droppable',
      items: '.content > li',
      containment: '#section-content',
      connectWith: [ '#top-items', '#recent-items' ], 
      update: function(ev) { 
        console.log('change to available');
        $('#available-items form.destroy_placement').each( function() { $(this).trigger('submit'); } );
      }
    } );

    //New Placement
    $('#create-placement').fn( RD.remote_form( { response: function( response ) {
      $('.placements_list').each( function() { $(this).fn('refresh'); } );
    }} ) );
    $('#create-placement').submit( function(ev) {
      $(this).fn('submit','json');
      return false;
    } );

    //Delete Placement
    $('.destroy_placement').livequery( 'submit', function(ev) {
      
      $(this).fn(RD.remote_form( { response: function() {
        var item = $(ev.target).parents('li[id^=placement_ids]').eq(0);
        item.hide('puff');
        item.queue( function() { $(this).remove(); $(this).dequeue(); } );
        //$(ev.target).parents('li[id^=placement_ids]').eq(0).hide('puff').remove();
      } } ));
      $(this).fn('submit', 'json');
      return false;
    });
    

