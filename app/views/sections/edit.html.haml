- form_for @section do |f|
  = render :partial => 'form', :locals => { :f => f }
  %p.submit
    = f.submit "Update"

#section-content.container
  .span-17
    #add-article.span-17.ui-block.inactive
      -#.js-staging
      .header.clear
        %h6.info 
          -#New Article
          = link_to "New Article", new_section_article_path(:section_id => @section ), :class => 'add button remote_add_article', :'data-target' => '#section-content #add-article-inset', :id => 'add-article-button'
      #add-article-inset.js-staging.simple
        .remote_content
    .clear

    - ordered, unordered = @section.placements.partition { |p| p.list_order }
    %ol#top-items.plain.section_placements.ui-block
      %h6.info
        Top Items
      .clear
      .reloadable
        .content
          - if ordered and !ordered.empty?
            - for placement in ordered
              = render :partial => 'sections/list/placement', :locals => { :placement => placement }

    %ul#recent-items.plain.section_placements.ui-block
      %h6.info
        Recent Items
      .clear
      .reloadable
        .content
          - if unordered and !unordered.empty?
            - for placement in unordered
              = render :partial => 'sections/list/placement', :locals => { :placement => placement }
    
  -#= link_to "new", new_section_article_path(:section_id => @section ), :class => 'add button'
  .span-3.prepend-3
    %ul#remove-items.plain.ui-block
      %h6#remove-title.info
        Remove
      .clear

  .span-6
    .new.section_placements.ui-block.js-keep
      %h6.info
        Add
      .clear
      - form_for @section.placements.build, :html => {:class => 'js-keep'} do |f|
        = f.select "article_id", article_options( :exclude_section => @section ), {}, :id => 'add_article_select'
        = f.hidden_field "section_id"
        = f.submit "Add", :id => 'create-placement-button', :class => 'remote_create_placement'


  #remote-staging.js-staging

- content_for :dom_ready do
  = "var auth_token = '#{form_authenticity_token}'"
  = "RD.section = #{@section.to_json}.section;"
  :plain

    //Refresh the content list
    $('#section-content').bind( 'refresh', function(ev) {
      $('#section-content #top-items .reloadable').load( '/sections/' + RD.section.id + '/edit #top-items .content', RD.ui.initialize );
      $('#section-content #recent-items .reloadable').load( '/sections/' + RD.section.id + '/edit #recent-items .content', RD.stacks.try('refresh') );
    } );

    //Cancel button, new article and edit
    $('#add-article-inset,.edit-article-inset').click( function(ev) {
      if( !$(ev.target).is('.cancel') ) { return true; }
      var article_inset = $(ev.target).parents('#add-article-inset,.edit-article-inset').eq(0);
      $(article_inset).hide(1200);
      $(article_inset).queue( function() {
        $('.remote_content', article_inset).html('');
        $(this).dequeue();
      } );
      $(article_inset).queue( function() {
        $(article_inset).parents('#add-article').addClass('inactive');
        $(this).dequeue();
      } );
      return false;

    } );

    //Edit or add an article
    $('#section-content').click( function(ev) {
      if( !$(ev.target).is('.edit,#add-article-button') ) { return true; }
      if( $(ev.target).is('.edit') ) {
        var article_inset = $(ev.target).parents('li[data-article-id]').eq(0).find('.edit-article-inset').eq(0);
      } else {
        var article_inset = $('#add-article-inset');
        $(article_inset).parents('#add-article').removeClass('inactive');
      }
      RD.stacks.create('show_article_form', article_inset, function() {
        $(this).show('blind', {}, 2000 );
      } );
      $( '.remote_content', article_inset ).load( ev.target.href, RD.stacks.try('show_article_form'));
      return false;
    } );
    
    //Article Submit
    $('#add-article-inset,.edit-article-inset').click( function(ev) {
      if( !$(ev.target).is(':submit') ) { return true; }
      var article_inset = $(ev.target).parents('#add-article-inset,.edit-article-inset').eq(0);
      RD.stacks.create('submit', article_inset, function() {  $(this).hide( 1000 ); });
      RD.stacks.submit.add( function() {  $('.remote_content', article_inset).html('') } );
      RD.stacks.submit.add( function() {  $(article_inset).parents('#add-article').addClass('inactive'); } );

      RD.interface.submit( {
        form: $(ev.target.form),
        callback: function( response ) {
          //highlight the new item
          var to_highlight = '#section-content li[data-article-id=' + response.article.id + ']';
          RD.stacks.create('refresh', '#section-content', function() {  $( to_highlight ).show('puff', {}, 1000 ); });

          RD.stacks.try('submit')();
          $('#section-content').trigger('refresh');
        }
      } );
      return false;
    } );

-# content_for :dom_ready do
  = "var auth_token = '#{form_authenticity_token}'"
  = "var section = #{@section.to_json}.section;"
  :plain
    var success_message = function(response) { RD.notify("success"); };
    //Create a new Article
    $('#add_article_link').click( function(ev) {
      var display = $(ev.target).attr('data-target');
      $.get('/sections/' + section.id + '/articles/new', {}, function( response ) {
        $(display).addClass('peeking').html( $('<h3></h3>').text('New Article')).append( response ).removeClass('peeking', 2500 ).find(':submit').click( function( ev ) {
          var form = $(ev.target.form);
          $.post( form.attr('action') + '.js', form.serialize(), function( response ) { 
            $('#recent-items').append( $('<li id="placement_ids_' + response.article.placements[0].id + '" data-article-id="'+response.article.id+'" class="peeking"></li>').append($('<h2></h2>').text( response.article.title )));
            $(display).addClass('peeking', 1500 );

            var new_article = $('#recent-items li:last' );
            form.effect('transfer', { to: new_article, className:'shadow' }, 800, function() {
              new_article.removeClass('peeking', 500 );
              success_message();  
            } );
          }, 'json');
          return false;
        } );
        
        $('.submit .cancel', display ).click( function() { 
          $( display ).addClass('peeking', 2000).html('')
          window.setTimeout( function() { $(display).removeClass('peeking'); }, 3000 );
          return false; 
        } );
      } );
      window.location.hash="add_article"
      return false;
    } );

    //Add a new Placemnt for an existing article
    $('#create-placement-button').click( function(ev) {
      var form = $(ev.target.form);
      var added_article = $( '#add_article_select option:selected').eq(0);
      if ( form === undefined ) return true;
      $.post( form.attr('action') + '.js', form.serialize(), function( response ) { 
        $('#recent-items').append( $('<li id="placement_ids_' + response.placement.id + '" data-article-id="'+added_article.val()+'" class="peeking"></li>').append($('<h2></h2>').text( added_article.text() )));
        added_article.parents( 'form' ).effect('transfer', { to: $('#recent-items li:last'), className: 'shadow' }, 300, function() {
          $('#recent-items li:last').removeClass('peeking', 500 );
          added_article.remove();
          success_message();
        } );
      }, 'json' );
      return false;
    } );
    
    //Update Top Items
    $('#top-items').sortable({ 
      tolerance: 'intersect',
      placeholder: 'shadow-droppable',
      opacity: .7,
      items: '> li',
      containment: '#section-content',
      update: function(ev) { 
        $.post( '/placement_orderings', '_method=put&authenticity_token=' + auth_token + '&' + $('#top-items').sortable( 'serialize' ), success_message);
      },
      connectWith: [ "#recent-items", '#remove-items' ]
    });

    //Update Recent Items
    $('#recent-items').sortable( { 
      placeholder: 'shadow-droppable',
      items: '> li',
      containment: '#section-content',
      connectWith: [ '#top-items', '#remove-items' ], 
      update: function(ev) { 
        $.post( '/placement_orderings', '_method=delete&authenticity_token=' + auth_token + '&' + $('#recent-items').sortable( 'serialize' ), success_message );
      }
    } );

    //Deletion
    $('#remove-items').sortable( { 
      items: '> li',
      connectWith: [ '#top-items', '#recent-items' ], 
      placeholder: 'shadow',
      update: function(ev) { 
        
        $('#remove-title').addClass('busy');
        $.post( ('/placements/' + $('#remove-items li').attr('id').replace('placement_ids_', '')), '_method=delete&authenticity_token=' + auth_token, function(result) {
          $('#remove-items').effect('shake', { distance: 2, times: 1 }, 200);
          $('#remove-items li').effect('scale', { percent: 30 }, 300, function() { 
            $('#add_article_select').append( $( '<option></option>' ).val( $(this).attr('data-article-id') ).text( $('h2', this).text() ) );
            $(this).remove(); 
          } );
          $('#remove-title').removeClass('busy');
        } );
      }
    });
  
    //remote edit form
    $('.section_placements .remote_edit_article').each( function() {
      var item = $(this).parents('li').eq(0);
      var display = item.find('.edit-article-inset');
      $(this).click( function() { 
        $.get( '/articles/'+item.attr('data-article-id') +'/edit', {}, function( response ) {
          display.show('slow').addClass('peeking');
          display.html( $('<h3></h3>').text('Edit Article') ).append( response );
          display.removeClass('peeking', 3000 );

          // override form submit behavior
          $(':submit', display ).click( function(ev) {
            var form = $( ev.target.form );
            $.post( form.attr('action') + '.js', form.serialize(), function( response ) { 
              display.addClass('peeking', 1500).hide('slow');
              $('h2:first', item ).text( response.article.title );
            }, 'json' );
            return false;
          } );

          // override form cancel behavior
          $('.cancel', display ).click( function(ev) {
            display.addClass('peeking', 1500).hide('slow').html('');
            return false;
          } );
        } );
        return false;
      }) ;
    } );
    
